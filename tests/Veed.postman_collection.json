{
	"info": {
		"_postman_id": "1da794a7-d6d0-4e95-9343-cb13f4a5336f",
		"name": "Veed",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21665746"
	},
	"item": [
		{
			"name": "VVP",
			"item": [
				{
					"name": "Genrate JWT Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const crypto = require('crypto-js');",
									"",
									"const createTestingUserHash = () => {",
									"    const timestamp = new Date().toISOString();",
									"    pm.collectionVariables.set(\"time\", timestamp);",
									"    const salt = pm.environment.get(\"salt\");",
									"    const emailAddress = pm.environment.get(\"email\");",
									"    pm.collectionVariables.set(\"email\", emailAddress);",
									"    var hash = crypto.SHA256(`testinguserhash::${emailAddress}::${timestamp}::${salt}`).toString(crypto.enc.Base64);",
									"    return (hash);",
									"}",
									"const generateLoginEmail = () =>",
									"{",
									"    return 'testing+' + (Math.random() + 1).toString(36).substring(2) + '@veed.io';",
									"}",
									"",
									"const hashGenerated = createTestingUserHash();",
									"console.log(`successfully generated hash : ${hashGenerated}`)",
									"",
									"pm.collectionVariables.set(\"hash\", hashGenerated);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Generate JWT Token\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"    var loginLink = jsonData.data.url;",
									"    pm.expect(jsonData.data).to.have.property('url');",
									"    var jwt = loginLink.split('=')[1];",
									"    postman.setEnvironmentVariable(\"token\", jwt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"testing\": {\n        \"timestamp\": \"{{time}}\",\n        \"hash\": \"{{hash}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/auth/login",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user can create a comment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set('commentId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Test\",\n    \"projectId\": \"{{projectId}}\",\n    \"timestamp\": 1,\n    \"name\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List all comments in a project\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"        const comment = \"jsonData.data.filter(C => C.id === pm.environment.get('commentId'))\";",
									"        pm.expect(comment.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostname}}/api/v1/comment?filter=projectId:{{projectId}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							],
							"query": [
								{
									"key": "filter",
									"value": "projectId:{{projectId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user can update a comment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.timestamp).to.be.eql(1)",
									"    pm.environment.set('commentId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Comment updated\",\n    \"timestamp\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment/{{commentId}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reply to a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user can reply to a comment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set('replyId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"This is a new reply\",\n    \"parentCommentId\": \"{{commentId}}\",\n    \"projectId\": \"{{projectId}}\",\n    \"timestamp\": 13,\n    \"name\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user can like a comment\", function () {",
									"    var jsonData = pm.response.json();",
									"    var commentId = pm.environment.get('commentId');",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data.commentId).to.be.eql(commentId);",
									"    pm.environment.set('likeId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{hostname}}/api/v1/comment/{{commentId}}/like",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"{{commentId}}",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify user can unlike a comment\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{hostname}}/api/v1/comment/{{commentId}}/like",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"{{commentId}}",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify project owner can delete a comment\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment/{{commentId}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create anonymous comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify anonymous user can post a comment\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data.name).to.equal('Anonym0us');",
									"    pm.environment.set('commentId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"This is an anonymous comment\",\n    \"projectId\": \"{{projectId}}\",\n    \"timestamp\": 2,\n    \"name\": \"Anonym0us\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete anonymous comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify owner can delete anonymous user's comment\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment/{{commentId}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment with email notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify email notification for comment is triggered\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set('commentId', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"This is a new comment\",\n    \"projectId\": \"{{projectId}}\",\n    \"timestamp\": 2,\n    \"name\": null,\n    \"notifications\": {\n        \"commenterName\": \"The post man fetch\",\n        \"commenterThumbnailUrl\": \"https://veed-assets.b-cdn.net/thumbnails/file.jpeg\",\n        \"projectName\": \"API Project\",\n        \"projectThumbnail\": \"https://cdn.veed.dev/thumbnails/file.jpeg\",\n        \"actionUrl\": \"https://www.veed.dev/view/{{projectId}}\",\n        \"recipients\": [\"{{emailRecipientUserId}}\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify project owner can delete a comment\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{hostname}}/api/v1/comment/{{commentId}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const crypto = require('crypto-js');",
					"",
					"const createTestingUserHash = () => {",
					"    const timestamp = new Date().toISOString();",
					"    pm.collectionVariables.set(\"time\", timestamp);",
					"    const salt = pm.environment.get(\"salt\");",
					"    const emailAddress = 'testing+t2t3slimit3@veed.io';",
					"    pm.collectionVariables.set(\"email\", emailAddress);",
					"    var hash = crypto.SHA256(`testinguserhash::${emailAddress}::${timestamp}::${salt}`).toString(crypto.enc.Base64);",
					"    return (hash);",
					"}",
					"const generateLoginEmail = () =>",
					"{",
					"    return 'testing+' + (Math.random() + 1).toString(36).substring(2) + '@veed.io';",
					"}",
					"",
					"const hashGenerated = createTestingUserHash();",
					"console.log(`successfully generated hash : ${hashGenerated}`)",
					"",
					"pm.collectionVariables.set(\"hash\", hashGenerated);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "time",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "hash",
			"value": ""
		}
	]
}